{"version":3,"sources":["js/utils/getElement/getElement.js","js/const/exampleGallery/exampleGallery.js","js/const/sliderDirectionMove/sliderDirectionMove.js","js/const/index.js","js/utils/moveSlider/moveSlider.js","js/utils/handleKeydownModal/handleKeydownModal.js","js/partials/generateCard/generateCard.js","js/partials/generateList/generateList.js","js/partials/generateSlider/generateSlider.js","js/partials/generatePlayer/generatePlayer.js","js/partials/generateModalPagination/generateModalPagination.js","js/partials/generateModal/generateModal.js","js/partials/index.js","js/utils/handleClickModal/handleClickModal.js","js/utils/toggleModal/toggleModal.js","js/utils/handleClickSlider/handleClickSlider.js","js/utils/index.js","js/index.js"],"names":["getElement","selector","document","querySelector","exampleGallery","i","_default","exports","default","SLIDER_DIRECTION_MOVE","LEFT","RIGHT","_exampleGallery","_interopRequireDefault","require","_sliderDirectionMove","obj","__esModule","_getElement","_const","itemsOnScreen","firstItemOnLastScreen","length","itemWidth","maxPosition","moveSlider","direction","slider","left","style","position","parseInt","moveDirection","concat","_toggleModal","handleKeydownModal","event","code","toggleModal","generateCard","src","generateList","elements","reduce","markup","element","index","generateSlider","generatePlayer","generateModalPagination","currentIndex","_","_generatePlayer","_generateModalPagination","generateModal","_generateCard","_generateList","_generateSlider","_generateModal","_partials","handleClickModal","target","classList","contains","innerHTML","dataset","_handleKeydownModal","_handleClickModal","modal","toggle","removeEventListener","addEventListener","_moveSlider","handleClickSlider","_event$target","className","includes","blur","_handleClickSlider","_utils","container","insertAdjacentHTML","map","video"],"mappings":"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","file":"js.47aa8b05.js","sourceRoot":"..\\src","sourcesContent":["//A function for searching an element in the DOM, the selector of the element\r\n//being searched is taken as a parameter, a pointer to this element is returned\r\nexport function getElement(selector) {\r\n    return document.querySelector(selector);\r\n}","//Creating a collection of videos, since according to the instructions the\r\n//collection should consist of eight identical videos, I use a loop to fill it.\r\nconst exampleGallery = [];\r\n\r\nfor (let i = 0; i < 8; i++) {\r\n    exampleGallery[i] = \"https://player.vimeo.com/video/824804225\";\r\n}\r\n\r\nexport default exampleGallery;","//Identifiers to indicate the direction of slider movement\r\nconst SLIDER_DIRECTION_MOVE = {\r\n    LEFT: \"left\",\r\n    RIGHT: \"right\",\r\n};\r\n\r\nexport default SLIDER_DIRECTION_MOVE;","//Application Constants\r\nimport exampleGallery from \"./exampleGallery/exampleGallery\";\r\nimport SLIDER_DIRECTION_MOVE from \"./sliderDirectionMove/sliderDirectionMove\";\r\n\r\nexport {\r\n    exampleGallery,\r\n    SLIDER_DIRECTION_MOVE,\r\n};","//Slider flipping function, takes rotation direction as a parameter\r\nimport { getElement } from \"../getElement/getElement\";\r\nimport { SLIDER_DIRECTION_MOVE, exampleGallery } from \"../../const\";\r\n\r\n//Number of elements on screen\r\nconst itemsOnScreen = 4;\r\n//Determining the index of the left element on the last pagination page\r\nconst firstItemOnLastScreen = exampleGallery.length - itemsOnScreen;\r\n//The width of one element, taking into account the width of the video and the gap between elements\r\nconst itemWidth = 250 + 8;\r\n//Slider position when the latest items in the collection are shown on the screen\r\nconst maxPosition = -1 * itemWidth * (firstItemOnLastScreen);\r\n\r\nexport function moveSlider(direction) {\r\n    const slider = getElement(\".slider\");\r\n    const { style: { left } } = slider;\r\n    \r\n    //Determining the current position of the slider,\r\n    //if this is the first function call the value is set to 0\r\n    let position = left === \"\" ? 0 : parseInt(left);\r\n    \r\n    //Determining the direction of rotation of the slider\r\n    const moveDirection = direction === SLIDER_DIRECTION_MOVE.LEFT ? 1 : -1;\r\n    \r\n    if (moveDirection === 1 && position === 0) {\r\n        //Setting a new position to the extreme right position in case of left rotation overflow\r\n        position = -1 * firstItemOnLastScreen * itemWidth;\r\n    } else if (moveDirection === -1 && position === maxPosition) {\r\n        //Setting a new position to the extreme left position in case of right rotation overflow\r\n        position = 0;\r\n    } else {\r\n        //Calculation of a new position in the general case\r\n        position += moveDirection * itemWidth;\r\n    }\r\n\r\n    //Setting the slider to a new position\r\n    slider.style.left = `${position}px`;\r\n}","//'keydown' event handler for the 'Escape' key in a modal window,\r\n//the modal window is closed, takes the event that occurred as a\r\n//parameter\r\nimport { toggleModal } from \"../toggleModal/toggleModal\";\r\n\r\nexport function handleKeydownModal(event) {\r\n    if (event.code === \"Escape\") {\r\n        toggleModal(event);\r\n    }\r\n}","//Generating a card for a slider, taking the video source as a parameter \r\nexport function generateCard(src) {\r\n    return `\r\n        <iframe\r\n            class=\"video video_preview\"\r\n            src=\"${src}?controls=0\"        \r\n        ></iframe>\r\n    `;\r\n}","//Generating a list of cards for the slider, taking a video collection as a\r\n//parameter\r\nexport function generateList(elements) {\r\n    return `\r\n        <ul class=\"slider\">\r\n            ${elements.reduce(\r\n                (markup, element, index) => markup + `\r\n                    <li class=\"list_item\">\r\n                        ${element}\r\n                        <div class=\"list_frame\" data-index=\"${index}\"></div>\r\n                    </li>\r\n                `, \"\")\r\n            }\r\n        </ul>\r\n    `;\r\n}","//Generation of a slider, the element that will be placed in the slider is\r\n//taken as a parameter. In my case this is a collection of videos\r\nimport { SLIDER_DIRECTION_MOVE } from \"../../const\";\r\n\r\nexport function generateSlider(element) {\r\n    return `\r\n        ${element}\r\n        <button\r\n            class=\"button slider_button slider_button__left\"\r\n            data-direction=\"${SLIDER_DIRECTION_MOVE.LEFT}\"\r\n        ></button>\r\n        <button\r\n            class=\"button slider_button slider_button__right\"\r\n            data-direction=\"${SLIDER_DIRECTION_MOVE.RIGHT}\"\r\n        ></button>\r\n    `;\r\n}","//Generating a player for a modal window, the index of the video that was\r\n//selected in the slider is taken as a parameter\r\nexport function generatePlayer(src) {\r\n    return `<iframe\r\n        class=\"video video_player\"\r\n        src=\"${src}?autoplay=1\"        \r\n    ></iframe>`;\r\n}","//Generating a pagination bar for a modal window, the index of the video that\r\n//is currently playing in the video collection is taken as a parameter\r\nimport { exampleGallery } from \"../../const\";\r\n\r\nexport function generateModalPagination(currentIndex) {\r\n    return `\r\n        <ul class=\"pagination\">\r\n            ${exampleGallery.reduce((markup, _, index) => (markup + `\r\n                <li\r\n                    class=\"pagination_item${index == currentIndex ?\r\n                        \" pagination_item__current\" :\r\n                        \"\"\r\n                    }\"\r\n                    data-index=\"${index}\"\r\n                ></li>\r\n            `), \"\")}\r\n        </ul>\r\n    `;\r\n}","//Generating content for a modal window, taking the video index in the video\r\n//collection as a parameter\r\nimport { generatePlayer } from \"../generatePlayer/generatePlayer\";\r\nimport { exampleGallery } from \"../../const\";\r\nimport { generateModalPagination } from \"../generateModalPagination/generateModalPagination\";\r\n\r\nexport function generateModal(index) {\r\n    return `\r\n        <button class=\"button modal_button\"></button>\r\n        ${generatePlayer(exampleGallery[index])}\r\n        ${generateModalPagination(index)}\r\n    `;\r\n}","//Generators of elements for rendering\r\nimport { generateCard } from \"./generateCard/generateCard\";\r\nimport { generateList } from \"./generateList/generateList\";\r\nimport { generateSlider } from \"./generateSlider/generateSlider\";\r\nimport { generateModal } from \"./generateModal/generateModal\";\r\nimport { generatePlayer } from \"./generatePlayer/generatePlayer\";\r\nimport { generateModalPagination } from \"./generateModalPagination/generateModalPagination\";\r\n\r\nexport {\r\n    generateCard,\r\n    generateList,\r\n    generateSlider,\r\n    generateModal,\r\n    generatePlayer,\r\n    generateModalPagination,\r\n};","//'click' event handler function for a modal window, handles clicking on the\r\n//close button and selecting a video using pagination, the event that occurred\r\n//is accepted as a parameter\r\nimport { toggleModal } from \"../toggleModal/toggleModal\";\r\nimport { getElement } from \"../getElement/getElement\";\r\nimport { generateModal } from \"../../partials\";\r\n\r\nexport function handleClickModal(event) {\r\n    //Gate for clicks on unnecessary elements\r\n    if (!event.target.classList.contains(\"modal_button\") && \r\n        !event.target.classList.contains(\"pagination_item\")) {\r\n        return;\r\n    }\r\n\r\n    //Handling a click on the close button of a modal window the modal window closes\r\n    if (event.target.classList.contains(\"modal_button\")) {\r\n        toggleModal(event);\r\n        return;\r\n    }\r\n\r\n    //Handling a click on the pagination page, the contents of the modal window are repaint\r\n    getElement(\".modal\").innerHTML = generateModal(event.target.dataset.index);\r\n}","//Function for opening/closing a modal window, as a parameter the event that\r\n//caused the opening/closing of the modal window\r\nimport { getElement } from \"../getElement/getElement\";\r\nimport { handleKeydownModal } from \"../handleKeydownModal/handleKeydownModal\";\r\nimport { handleClickModal } from \"../handleClickModal/handleClickModal\";\r\nimport { generateModal } from \"../../partials\";\r\n\r\nexport function toggleModal(event) {\r\n    const modal = getElement(\".modal\");\r\n    \r\n    modal.classList.toggle(\"modal__shown\");\r\n\r\n    //Processing the closing of a modal window,\r\n    //clearing the contents of the window and removing event handlers\r\n    if (!modal.classList.contains(\"modal__shown\")) {\r\n        modal.innerHTML = \"\";\r\n\r\n        modal.removeEventListener('click', handleClickModal);\r\n        document.removeEventListener('keydown', handleKeydownModal);\r\n        \r\n        return;\r\n    }\r\n\r\n    //Filling the contents of the modal window\r\n    modal.innerHTML = generateModal(event.target.dataset.index);\r\n\r\n    //Adding event handlers\r\n    modal.addEventListener('click', handleClickModal);\r\n    document.addEventListener('keydown', handleKeydownModal);\r\n}","//'click' event handler for the slider, handles the click event on the video\r\n//card and on the slider flipping buttons, takes the event that occurred as a\r\n//parameter\r\nimport { moveSlider } from \"../moveSlider/moveSlider\";\r\nimport { toggleModal } from \"../toggleModal/toggleModal\";\r\n\r\nexport function handleClickSlider(event) {\r\n    const { target: { className, dataset } } = event;\r\n\r\n    //Gate for clicks on unnecessary elements\r\n    if (!className.includes(\"list_frame\")\r\n        && !className.includes(\"slider_button\")) {\r\n            return;\r\n    }\r\n\r\n    //Handling a click on the video card, opening a modal window with the selected video\r\n    if (className.includes(\"list_frame\")) {\r\n        toggleModal(event);\r\n        return;\r\n    }\r\n    \r\n    ////Handling a click on the slider flipping buttons, the slider is scrolling\r\n    moveSlider(dataset.direction);\r\n    \r\n    //Removing focus from a slider flipping button\r\n    event.target.blur();\r\n}","//Utilities used in the application\r\nimport { getElement } from \"./getElement/getElement\";\r\nimport { handleClickSlider } from \"./handleClickSlider/handleClickSlider\";\r\nimport { moveSlider } from \"./moveSlider/moveSlider\";\r\nimport { toggleModal } from \"./toggleModal/toggleModal\";\r\nimport { handleKeydownModal } from \"./handleKeydownModal/handleKeydownModal\";\r\nimport { handleClickModal } from \"./handleClickModal/handleClickModal\";\r\n\r\nexport {\r\n    getElement,\r\n    handleClickSlider,\r\n    moveSlider,\r\n    toggleModal,\r\n    handleKeydownModal,\r\n    handleClickModal\r\n};","import {\r\n    getElement,\r\n    handleClickSlider,\r\n} from \"./utils\";\r\nimport { exampleGallery } from \"./const\";\r\nimport {\r\n    generateCard,\r\n    generateList,\r\n    generateSlider,\r\n} from \"./partials\";\r\n\r\nconst container = getElement(\".container\")\r\n\r\n//Adding a Slider\r\ncontainer.insertAdjacentHTML(\"beforeend\",\r\n    generateSlider(\r\n        generateList(\r\n            exampleGallery.map(video => generateCard(video))\r\n        )\r\n    )\r\n);\r\n\r\n//Adding an event handler\r\ncontainer.addEventListener('click', handleClickSlider);"]}